{"version":3,"sources":["components/AddCategories.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGiifs.js","GifExpertApp.js","index.js"],"names":["AddCategories","setCategories","useState","inputValue","setInputValue","console","log","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAKaA,EAAgB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC9B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OAFAC,QAAQC,IAAI,wBAGV,sBAAMC,SAVc,SAACC,GACrBA,EAAEC,iBACEN,EAAWO,OAAOC,OAAS,IAC7BV,GAAc,SAACW,GAAD,OAAWT,GAAX,mBAAyBS,OACvCR,EAAc,MAMhB,SACE,uBAAOS,KAAK,OAAOC,MAAOX,EAAYY,SAjBf,SAACP,GAC1BJ,EAAcI,EAAEQ,OAAOF,OAEvBT,QAAQC,IAAIE,S,QCTHS,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAIhC,OACI,sBAAKC,UAAU,0CAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCRHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbN,EAFa,iDAEkCO,UAAUF,GAF5C,+DAIAG,MAAMR,GAJN,cAIbS,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QAGtCd,QAAQC,IAAIyB,GAdO,kBAeZA,GAfY,4CAAH,sDCKPM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAKxB,ECN0B,SAACA,GACzB,MAA0BtB,mBAAS,CAC/B4B,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAnBAnC,QAAQC,IAAI,uBAEZmC,qBAAU,WACNlB,EAAQC,GACHkB,MAAK,SAAAC,GACMH,EAAS,CACTV,KAAMa,EACNL,SAAS,SAG3B,CAACd,IASIe,EDlBuBK,CAAapB,GAA/BW,EAAd,EAAOL,KAAcQ,EAArB,EAAqBA,QAUrB,OARAjC,QAAQC,IAAI6B,GASR,qCACE,oBAAIf,UAAU,oCAAd,SAAmDI,IAClDc,GAAW,mBAAGlB,UAAU,mCAAb,qBAUZ,qBAAKA,UAAU,YAAf,SAEQe,EAAOH,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aElCpBW,EAAe,WAGxB,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAQA,OAFAI,QAAQC,IAAI,uBAGR,qCACI,8CACA,cAAC,EAAD,CAAeL,cAAiBA,IAChC,uBAEA,6BAKQ6C,EAAWd,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAASA,SAAWA,GAAgBA,Y,MCtB5DuB,IAASC,OAEN,cAAC,EAAD,IACDC,SAASC,eAAe,W","file":"static/js/main.49d17a43.chunk.js","sourcesContent":["/** Fragment <> es utilizado para agrupar elementos Html */\r\n\r\nimport React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategories = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('');//undefined ()!!\r\n\r\n  const handledInputChange = (e) => { //actualiza el valor del estado con el valor que tiene el input\r\n    setInputValue(e.target.value);\r\n\r\n    console.log(e);\r\n  };\r\n\r\n  const handledSubmit = (e) => { // envia el formulario y agrega una categoria al estado de categoria \r\n    e.preventDefault();//preventDefault previene que se recargue la pagina\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue,...cats]);\r\n      setInputValue('');\r\n    }\r\n  };\r\n  console.log('render AddCategories')\r\n\r\n  return (\r\n    <form onSubmit={handledSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handledInputChange} />\r\n    </form>\r\n  );\r\n}\r\n\r\nAddCategories.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n   \r\n    // console.log(id,title,url);\r\n    \r\n    return (\r\n        <div className=' card animate__animated animate__fadeIn'>\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n","\r\nexport const getGifs = async (category) => {\r\n    // const url =`https://api.giphy.com/v1/gifs/search?q=Rick+and+Morty&limit=10&api_key=hvuocrMs9VK92p0edZm4tcwmdXbBiHMi`;\r\n    const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=hvuocrMs9VK92p0edZm4tcwmdXbBiHMi`;\r\n\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n    console.log(gifs);\r\n    return gifs;\r\n  };\r\n\r\n  \r\n  \r\n  ","// import React, { useState, useEffect } from \"react\";\r\n// import { getGifs } from \"../helpers/getGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\nimport React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGiifs\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  // const [images, setImages] = useState([]);\r\n\r\n  // const state = useFetchGifs();\r\n\r\n  const {data:  images,loading} = useFetchGifs(category); // objeto desestructurado\r\n\r\n  console.log(images);\r\n\r\n  // useEffect(() => { // unicamente se va a renderizar si la categoria cambia\r\n  //     getGifs(category)\r\n  //       //  .then(imgs => setImages(imgs)) \r\n  //        .then(setImages);\r\n  // }, [category]);\r\n\r\n  return (\r\n      <>\r\n        <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n        {loading && <p className='animate__animated animate__flash'>Loading</p>}\r\n\r\n         {/* <ol>\r\n          {\r\n            images.map(({id,title}) => (\r\n              <li key={id}>{title}</li>\r\n            ))\r\n          }\r\n        </ol>  */}\r\n\r\n        <div className='card-grid'>\r\n            {\r\n                images.map(img => (\r\n                    <GifGridItem \r\n                        key={img.id} \r\n                        {...img} \r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n      </>\r\n    \r\n  );\r\n};\r\n/*Al usar este Hook, le estamos indicando a React que el componente tiene que hacer algo después de renderizarse\r\n  useEffect nos permite expresar diferentes tipos de efectos secundarios después de que un componente se renderice.\r\n    Si quieres ejecutar un efecto y sanearlo solamente una vez (al montar y desmontar), puedes pasar un array vacío ([]) \r\n    como segundo argumento. Esto le indica a React que el efecto no  depende de ningún valor proveniente\r\n     de las props o el estado, de modo que no necesita volver a ejecutarse.\r\n    Si pasas un array vacío ([]), las props y el estado dentro del efecto siempre tendrán sus valores iniciales. */\r\n\r\n\r\n    ","//Coustom Hooks funcionan commo si fueran funtional Components pueden tener efecto, pueden usar reducer, contextos ... \r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    console.log('render useFetchGifs')\r\n\r\n    useEffect(() => {  //unicamente se va a renderizar si la categoria cambia\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                        setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n            })\r\n    },[category])\r\n\r\n    // setTimeout(() => {\r\n    //     setstate({\r\n    //         data: [1,2,3,4,5,6,7],\r\n    //         loading: false\r\n    //     })\r\n    // }, 3000);\r\n\r\n    return state;// {data: [], loading: true}\r\n}","import React, { useState } from 'react'\r\nimport { AddCategories } from './components/AddCategories';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    // const categories = ['One Punch','Samurai X', 'Dragon Ball'];\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = ()=>{\r\n    // //    setCategories([...categories,'HunterXHunter']);\r\n    //     setCategories(cats => [...cats,'HunterXHunter']);\r\n    // }\r\n    console.log('render GifExpertApp')\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategories setCategories = {setCategories}/>\r\n            <hr/>\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n            <ol>\r\n                {\r\n                //     categories.map(category =>\r\n                //         <li key= {category}>{category}</li>\r\n                //    )s\r\n                    categories.map(category =>(\r\n                        <GifGrid category ={category} key= {category}/>\r\n                    ) )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  //  <App />,\n   <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n\n\n"],"sourceRoot":""}